{"name": "testInicio", "status": "failed", "statusDetails": {"message": "AssertionError: assert '' == 'Mover a papelera'\n  - Mover a papelera", "trace": "self = <src.test.test_Inicio.TestInicio testMethod=testInicio>\n\n    def testInicio(self):\n        nombre = \"hola0_1.test@yopmail.com\"\n        contraseña = \"Qa123456$\"\n    \n        #NextCloud.get_json_file(self, \"portal\") #CARGA EL JSON CON TODOS SUS VALORES\n    \n        with allure.step(u\"Paso 2: Ingresamos a Google y Empieza la Automatizacón\"):\n    \n             NextCloud.get_elements(self, \"Btn_inicioSesion\").click()\n             time.sleep(3)\n             NextCloud.get_elements(self, \"P_Correo\").click()\n             time.sleep(2)\n    \n             NextCloud.get_elements(self, \"Email\").send_keys(nombre)\n             NextCloud.get_elements(self, \"Password\").send_keys(contraseña)\n    \n             #NextCloud.esperar_elemento(self, \"IniciarSesion\") #ESPERAR ELEMTO\n    \n             NextCloud.get_elements(self, \"IniciarSesion\").click()\n             time.sleep(5)\n    \n             ###################################################\n             ######## EMPLIEZA AUTOMATIZACION DEL PORTAL #######\n             ###################################################\n             NextCloud.captura(self, \"Claro Drive\") #CAPTURA LA PANTALLA Y LA GUARDA EN EL REPORTE DE ALLURE\n             #NextCloud.captura_pantalla(self) #CAPTURA LA PANTALLA\n    \n             NextCloud.get_elements(self, \"Btn_Crear+\").click()\n             time.sleep(3)\n    \n             ####### COMPARO LOS TEXTOS DE CADA ACCION #######\n             self.TEXTOS_ACCIONES = self.driver.find_elements(By.CLASS_NAME, \"menu-item-name\")\n             self.count = 0\n    \n             for self.TEX in self.TEXTOS_ACCIONES:\n                 RESULTADO_TEXTOS = ['Carpeta nueva', 'Cargar archivo',\n                                     'Cargar carpeta', 'Nuevo archivo de texto',\n                                     'Nuevo documento', 'Nueva hoja de cálculo',\n                                     'Nueva presentación']\n                 assert RESULTADO_TEXTOS[self.count] == self.TEX.text, \"LOS NOMBRES NO COINCIDEN\"\n                 self.count = self.count + 1\n             ####### TERMINO DE COMPARAR LOS TEXTOS DE CADA ACCION #######\n    \n             NextCloud.get_elements(self, \"Crear_Carpeta\").click()\n             time.sleep(3)\n             #NextCloud.esperar_elemento(self, \"Btn_Crear_Carpeta\")  # ESPERAR ELEMTOvvvvvv\n    \n             NextCloud.get_elements(self, \"Btn_Crear_Carpeta\").click()\n             time.sleep(3)\n             NextCloud.get_elements(self, \"Cerrar_detalle_Carpeta\").click()\n             time.sleep(3)\n    \n             NextCloud.get_elements(self, \"Btn_Crear+\").click()\n             time.sleep(3)\n             '''NextCloud.get_elements(self, \"Cargar_Archivo\").click()   #CARGAR ARCHIVOS\n             time.sleep(3)\n             NextCloud.get_elements(self, \"Cargar_Archivo\").click()   #CARGAR ARCHIVOS\n             time.sleep(3)'''\n             NextCloud.get_elements(self, \"Nuevo_Archivo_Texto\").click()\n             time.sleep(3)\n             NextCloud.get_elements(self, \"Btn_Crear_Archivo_Texto\").click()\n             time.sleep(3)\n             NextCloud.get_elements(self, \"Cerrar_Archivo_Texto\").click()\n             time.sleep(3)\n             NextCloud.get_elements(self, \"Cerrar_Detalle_Texto\").click()\n             time.sleep(3)\n    \n             NextCloud.get_elements(self, \"Btn_Crear+\").click()\n             time.sleep(3)\n             NextCloud.get_elements(self, \"Nuevo_Documento\").click()\n             time.sleep(3)\n             NextCloud.get_elements(self, \"Btn_Crear_Nuevo_Documento\").click()\n             time.sleep(3)\n             NextCloud.get_elements(self, \"Cerrar_Nuevo_Documento\").click()\n             time.sleep(3)\n    \n             NextCloud.get_elements(self, \"Btn_Crear+\").click()\n             time.sleep(3)\n             NextCloud.get_elements(self,  \"Hoja_Calculo\").click()\n             time.sleep(3)\n             NextCloud.get_elements(self, \"Btn_Crear_Hoja_Calculo\").click()\n             time.sleep(3)\n             NextCloud.get_elements(self, \"Cerrar_Hoja_Calculo\").click()\n             time.sleep(3)\n    \n             NextCloud.get_elements(self, \"Btn_Crear+\").click()\n             time.sleep(3)\n             NextCloud.get_elements(self, \"Nueva_Presentacion\").click()\n             time.sleep(3)\n             NextCloud.get_elements(self, \"Btn_Crear_Presentacion\").click()\n             time.sleep(3)\n             NextCloud.get_elements(self, \"Cerrar_Presentacion\").click()\n             time.sleep(3)\n    \n             NextCloud.get_elements(self, \"Vista_Cuadricula\").click()\n             time.sleep(3)\n             NextCloud.get_elements(self, \"Vista_Lista\").click()\n             time.sleep(3)\n    \n             ######### FUNCIONES DE OPCIONES DE ARCHIVOS ###########\n             '''self.NAME_ACCIONES_ARCHIVOS = self.driver.find_elements(By.XPATH, \"/html/body/div[3]/div/app-amx-files/app-files-content/div/app-list[3]/app-file[1]/div/div[1]/app-menu/ul/li[2]/div[1]/div\")\n             self.count = 0\n    \n             for self.NAM in self.NAME_ACCIONES_ARCHIVOS:\n                 RESULTADO_NAME = ['Mover a papelera', 'Compartir',\n                                   'Añadir a favoritos', 'Detalles',\n                                   'Renombrar', 'Mover o copiar', 'Descargar']\n                 assert RESULTADO_NAME[self.count] == self.NAM.text, \"LOS TEXTOS NOMBRES NO COINCIDEN\"\n                 self.count = self.count + 1'''\n    \n             NextCloud.get_elements(self, \"Mover_Papelera\").click()\n             time.sleep(3)\n             NextCloud.get_elements(self, \"Compartir\").click()\n             time.sleep(3)\n             NextCloud.get_elements(self, \"Cerrar_Compartir\").click()\n             time.sleep(3)\n    \n             ####### FUNCION PARA LOCALIZAR UN ELEMENT Y DESPLEGAR SU CONTENIDO #########\n             localizador = self.driver.find_element(By.XPATH, \"/html/body/div[3]/div/app-amx-files/app-files-content/div/app-list[3]/app-file[1]/div/div[1]/div[3]\")\n             action = ActionChains(self.driver)\n             action.move_to_element(localizador)\n             action.perform()\n             time.sleep(3)\n             ####### TERMINA FUNCION PARA LOCALIZAR UN ELEMENT Y DESPLEGAR SU CONTENIDO #########\n    \n             NextCloud.get_elements(self, \"Favoritiar\").click()\n             time.sleep(3)\n    \n             localizador = self.driver.find_element(By.XPATH,\"/html/body/div[3]/div/app-amx-files/app-files-content/div/app-list[3]/app-file[1]/div/div[1]/div[3]\")\n             action = ActionChains(self.driver)\n             action.move_to_element(localizador)\n             action.perform()\n             time.sleep(3)\n             NextCloud.get_elements(self, \"Detalles\").click()\n             time.sleep(3)\n             NextCloud.get_elements(self, \"Cerrar_Detalles\").click()\n             time.sleep(5)\n    \n             localizador = self.driver.find_element(By.XPATH, \"/html/body/div[3]/div/app-amx-files/app-files-content/div/app-list[3]/app-file[1]/div/div[1]/div[3]\")\n             action = ActionChains(self.driver)\n             action.move_to_element(localizador)\n             action.perform()\n             time.sleep(3)\n             NextCloud.get_elements(self, \"Rename\").click()\n             time.sleep(3)\n    \n             NextCloud.get_elements(self, \"Mover_Copiar\").click()\n             time.sleep(3)\n             NextCloud.get_elements(self, \"Cerrar_Mover_Copiar\").click()\n             time.sleep(3)\n    \n             localizador = self.driver.find_element(By.XPATH, \"/html/body/div[3]/div/app-amx-files/app-files-content/div/app-list[3]/app-file[1]/div/div[1]/div[3]\")\n             action = ActionChains(self.driver)\n             action.move_to_element(localizador)\n             action.perform()\n             time.sleep(3)\n             NextCloud.get_elements(self, \"Descargar\").click()\n             time.sleep(3)\n    \n             localizador = self.driver.find_element(By.XPATH, \"/html/body/div[3]/div/app-amx-files/app-files-content/div/app-list[3]/app-file[1]/div/div[1]/div[3]\")\n             action = ActionChains(self.driver)\n             action.move_to_element(localizador)\n             action.perform()\n             time.sleep(3)\n             NextCloud.get_elements(self, \"Favoritiar\").click() #DESFAVORITIAR\n             time.sleep(3)\n    \n             NextCloud.get_elements(self, \"Check_Imagen\").click() #SELECCIONO ARCHIVO\n             time.sleep(3)\n             NextCloud.get_elements(self, \"Check_Imagen\").click() #DESELECCIONO ARCHIVO\n             time.sleep(3)\n    \n             assert NextCloud.get_text(self, \"Titulo_Archivos\") == \"Archivos\" #COMPARO EL TEXT ARCHIVOS\n             assert NextCloud.get_text(self, \"Titulo_Carpeta\") == \"Carpetas\" #COMPARO EL TEXT CARPETA\n             assert NextCloud.get_text(self, \"Titulo_Archivos_Recientes\") == \"Archivos recientes\"  #COMPARO EL TEXT ARCHIVOS RECIENTES\n    \n             NextCloud.get_elements(self, \"Check_Carpeta\").click()  #SELECCIONO CARPETA\n             time.sleep(3)\n             NextCloud.get_elements(self, \"Check_Carpeta\").click()  #DESELECCIONO CARPETA\n             time.sleep(3)\n             NextCloud.get_elements(self, \"Mover_Papelera_Carpeta\").click()  #ELIMONO CARPETA\n             time.sleep(3)\n    \n             #FUNCIONALIDADES HEADER LIST_VIEW\n             NextCloud.get_elements(self, \"Check_Header_list_view\").click()\n             time.sleep(3)\n    \n             '''self.OPCIONES_HEADER = self.driver.find_elements(By.XPATH, \"/html/body/div[3]/div/app-amx-files/app-files-content/div/app-header/div/div[2]\")\n             self.count = 0\n    \n             for self.OPC in self.OPCIONES_HEADER:\n                 RESULTADO_OPCIONES = ['Mover o copiar', 'Descargar', 'Eliminar']\n                 assert RESULTADO_OPCIONES[self.count] == self.OPC.text, \"LOS TEXTO NO COINCIDEN\"\n                 self.count = self.count + 1\n             time.sleep(3)'''\n             assert NextCloud.get_text(self, \"Header_Mover_Copiar\") == \"Mover o copiar\"\n             assert NextCloud.get_text(self, \"Header_Descargar\") == \"Descargar\"\n             assert NextCloud.get_text(self, \"Header_Eliminar\") == \"Eliminar\"\n    \n             NextCloud.get_elements(self, \"Header_Mover_Copiar\").click()\n             time.sleep(3)\n             NextCloud.get_elements(self, \"Header_Cerrar_Mover_Copiar\").click()\n             time.sleep(3)\n    \n             NextCloud.get_elements(self, \"Header_Descargar\").click()\n             time.sleep(3)\n             #NextCloud.get_elements(self, \"Check_Header_list_view\").click()\n             time.sleep(3)\n             #NextCloud.get_elements(self, \"Header_Eliminar\").click()\n             #time.sleep(3)\n             #TERMINA FUNCIONALIDADES HEADER LIST_VIEW\n    \n             ############### FUNCIONALIDADES DE LA LISTA DE OPCIONES EN IMAGENES EN ARCHIVOS RECIENTES ############\n             NextCloud.get_elements(self, \"Menu_List_Imagenes\").click()\n             time.sleep(3)\n    \n>            assert NextCloud.get_text(self, \"Menu_List_Imagenes_Eliminar\") == \"Mover a papelera\"\nE            AssertionError: assert '' == 'Mover a papelera'\nE              - Mover a papelera\n\ntest_Inicio.py:244: AssertionError"}, "description": "Se realizo la primera prueba para genrar un reporte en allure: </br>\n                    La prueba se realizo con exito </br>\n                    </br></br>", "steps": [{"name": "Paso 1: Ingresamos a Google", "status": "passed", "start": 1591994511652, "stop": 1591994540666}, {"name": "Paso 2: Ingresamos a Google y Empieza la Automatizacón", "status": "failed", "statusDetails": {"message": "AssertionError: assert '' == 'Mover a papelera'\n  - Mover a papelera\n", "trace": "  File \"C:\\test-python-selenium\\src\\test\\test_Inicio.py\", line 244, in testInicio\n    assert NextCloud.get_text(self, \"Menu_List_Imagenes_Eliminar\") == \"Mover a papelera\"\n"}, "attachments": [{"name": "Claro Drive", "source": "1ef312ed-5658-45c6-8e13-a4851aba81fb-attachment.png", "type": "image/png"}], "start": 1591994540667, "stop": 1591994782481}, {"name": "Paso 3: Cerramos el Driver, Se cierra la Automación", "status": "passed", "start": 1591994783373, "stop": 1591994801286}], "attachments": [{"name": "stdout", "source": "2a5c3fa3-41b3-4d13-87b0-30e8f43cdc79-attachment.txt", "type": "text/plain"}], "start": 1591994511652, "stop": 1591994782483, "uuid": "191b683d-fddc-4df8-9772-0ec944d4239f", "historyId": "603447883bd5b34f33644bbd8bcbdd83", "testCaseId": "20a55103fed2e23c11ab1a82c79200a3", "fullName": "test.test_Inicio.TestInicio#testInicio", "labels": [{"name": "severity", "value": "normal"}, {"name": "story", "value": "Segunda prueba con Allure: Captura de Pantalla"}, {"name": "feature", "value": "Test Claro drive 02"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_Inicio"}, {"name": "subSuite", "value": "TestInicio"}, {"name": "host", "value": "Ramirez"}, {"name": "thread", "value": "12624-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_Inicio"}], "links": [{"type": "test_case", "url": "Caso de prueba de Inicio sesion", "name": "Aqui se pude poner la url para conectar el testCase a Jira"}]}